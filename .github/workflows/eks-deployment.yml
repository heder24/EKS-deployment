# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

# name: Pull image from Docker Hub
# env:
#   DOCKER_USER: ${{secrets.DOCKER_HUB_USER}}
#   DOCKER_PASSWORD: ${{secrets.DOCKER_HUB_TOKEN}}
#   DOCKER_REPOSITORY: my-app
#   NODE_IMAGE_TAG: knote


on:
  push:
    branches: [ "main" ]
  pull_request:

permissions: write-all
  # contents: read
  # issues: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: "./"

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -no-color

   # Add a comment to pull requests with plan results
    - name: add-plan-comment
      id: comment
      uses: actions/github-script@v3
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
          <details><summary>Show Plan</summary>
          
          \`\`\`${process.env.PLAN}\`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Scan Terraform Config for Vulnerabilities

    - name: Run Snyk to check configuration files for security issues
      # Snyk can be used to break the build when it detects security issues.
      # In this case we want to upload the issues to GitHub Code Scanning
      continue-on-error: true
      uses: snyk/actions/iac@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --sarif-file-output=snyk.scan
        sarif: false
    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: snyk.scan

  
    # - name: Run Trivy vulnerability scanner in IaC mode
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     scan-type: 'config'
    #     hide-progress: false
    #     format: 'sarif'
    #     output: 'trivy-results.sarif'
    #     ignore-unfixed: true
    #     severity: 'CRITICAL,HIGH'

    # - name: Upload Trivy scan results to GitHub Security tab
    #   uses: github/codeql-action/upload-sarif@v2
    #   with:
    #     sarif_file: 'trivy-results.sarif'


    # - name: Run tfsec
    #   uses: aquasecurity/tfsec-sarif-action@9a83b5c3524f825c020e356335855741fd02745f
    #   with:
    #     sarif_file: tfsec.sarif

    # - name: Upload SARIF file
    #   uses: github/codeql-action/upload-sarif@v2
    #   with:
    #     # Path to SARIF file relative to the root of the repository
    #     sarif_file: tfsec.sarif

    #On push to "main", build or change infrastructure according to Terraform configuration files
    #Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      env:
        apply: true
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push' d
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

    - name: Terraform Destroy
      env:
        destroy: false
      if: ${{ env.destroy == 'true' }} 
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform destroy -auto-approve -input=true

    - name: install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest' # default is latest stable
      id: install

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    # - name: install helm 
    #   uses: azure/setup-helm@v3
    #   with:
    #     version: 'latest' # default is latest (stable)
    #     token: ${{ secrets.GITHUB_TOKEN }} # only needed if version is 'latest'
    #   id: install

  #  - name: Pull Image from Docker Hub    
  #     run: |
  #       docker login -u ${{env.DOCKER_USER}} -p ${{env.DOCKER_PASSWORD}}
  #       docker pull ${{env.DOCKER_USER}}/${{env.DOCKER_REPOSITORY}}:${{env.NODE_IMAGE_TAG}}
      
    - name:  update kubeconfig
      run : |
         aws eks update-kubeconfig --region us-east-2 --name prod

    -name: set kubeconfig context 
     uses: azure/k8s-set-context@v3
    with:
      method: kubeconfig
      kubeconfig: <apiVersion: v1
clusters:
- cluster:
    server: ''
  name: arn:aws:eks:::cluster/
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lJY2VGK20zdEE0dmN3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TXpFeE1qa3dNVEEzTXpCYUZ3MHpNekV4TWpZd01URXlNekJhTUJVeApFekFSQmdOVkJBTVRDbXQxWW1WeWJtVjBaWE13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUUMrYlk2aERzcnBXSitobU9kYjJZTXc0SkFkbldmcTlCMzZHZDkzMTFGNGtiUGh1OGMwWHl3dW9XWU0KNGVBZFJuUFRPeS9wRXdwMnkwQnF4NWZQS3RuVFJPUy94U1plSkNoZ2pnN1VKc21zdXN3T3FxL1EzZTExY1AyOQpXTkdjeGlDdlg0Z281NHg2bTB3KzIzNzUrVXAzUVd5alhOUHZad2s4OXFYaVVLSWF0RlIzNTVKVzFRc0E1T2lmCktGZ1FoZVhnYjVjNUJWc3JkWTlwRzh2Rjh6cldWSDBPajlGSjJzRDU2aUkwRXAxNjVXQkRFMCtUdTJQTjUwdG8KdDFCanZqVU0xWGlIUnZ5TnRlOFNnZlA2WVhCcWxCM05PWWdsaEN2bS93TXh1K1c0dkhueHBvTjUvaStYWjBCKwpwdzNtcm5kWjcrRXVmNE1Ba1BxdHM5cmIxQWYzQWdNQkFBR2pXVEJYTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQCkJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJRcVkvdXU5U0J4d25qbkQ2ajlkcUJ0eGFCY2FqQVYKQmdOVkhSRUVEakFNZ2dwcmRXSmxjbTVsZEdWek1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQzNpTjlzamNvRAo1d0REbXNJTEJrdXRoRmlFUmRkUTdINHlUN21hZitFMGloQU5UUEtmbXVWakR5YlphWTIrN2tCZnovZWs0YVcyCmhsWnF0MnUrU3VnR2VVZ3RnSVA0R0FLdTdYOXNtcFBBaWhveTVSSGJ5YkpjdEtSc3lkQjdWbzVpSCtZK1E2WC8KVHozZVgyZ1YwMks5b2MvYUc3bTVlWWdXbkNWMzlTUCtBSWc3WWpXdGF6eUZqZWVUbWlyQkRmeWhEMk0vZGp5VQpCbEhVeDhlMmx3NnRKSE4vdXprcld0MFJwMFpTK3Yzd3A0NVhHUWUwZzl4LzhUalkvOU9mbCsrYlI2UkQ0NGVMCnVET3JKL2hsZ2J2TUE2V1MxaFhqY1Y1Y1V3OHBPL2RDSjMvV3lmYmx0NlNCaGVDc1dRS3BsZ3dNbitvTnNPNmkKQkRTZEVLT3FPaDUvCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    server: https://2178D5CFAA62770512E9F69C6F148E0E.gr7.us-east-2.eks.amazonaws.com
  name: arn:aws:eks:us-east-2:312029113425:cluster/prod
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJek1URXdOekV5TlRVd01sb1hEVE16TVRFd05ERXlOVFV3TWxvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTVROCjFjMXd2cTI0cGJrTnI3N0FGSzhnMEpOR2NmVGNwRUJXVk5QcTNWL084ZUVhbEhhZWZUS2hDWk9heUdYb1o1eFkKcHM1UFBDZ0ZMcHowUWQrN091VEpBU1dpZGdOU1lwamRTTUIzT1Nxck1objNONnRkR0RCN2gyQ3A3a2ZMc3ZoSwpLZ21hSGVmWUFNNEc3aklCcXRXUzhEcTNXUCtTaElDa0trK1ZKUnJFTkNUR0RPWFMvby9hY1RGYlRRc1RkeEIvCnlKQXYvWmFCM0xwamxsR3paakQyQkc2Z0g0R01pU2xESStGN2RaZHN5a1lJT2tlTlIvWEtJMkg5Mmw1ZFFaNzMKQWY3MjBvYVZCQnpRd04wZFZCOEM3YVdlZ2NYV2Q2VFpNNENHd1dQbThNclhvU1BUWEo1K1dBS0l4czUyZW1rbwp3VGFLUnljbVVLOGdwYjZmSGNVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZQYUU3UU1WUC9UN1k0VTBrSUdMMVdtNENoK2tNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRTQxUk04UFdTbGxRUGVTaHdHRQpLT2F1ZzlqUHdqckVsay82c2VhNXNBS3RRYjRyQkxacTN4QWRLblJIemVTS3V2TjZRRFVWU1Arc2JLb3dMVGtXCjF3QU1MMjZWY0paQVUwbUg3cHBBT0I2cUllTDVYN1BUc3JBZEdKaXNUazhHbjJ0OEtQaXVRZDlpLzZsVld4T2cKWWlHQnNxZTN5a3VjZmwxdXk5d1pQT1owUGtMTk9JcEcyeUNpSzRNbU41UmhHM3Bvd3NxSjhJQ2Y2TUEwekJRVwpBS0RGQ3VlcFRFaVVuYlhzSjEwbEFWbklGU2JVbnZCQThZRmZ6eDlLM2tCWUk0VVZWbE1oWk5DVWViY2dsS1BLClVzVTVTMW9RUDJHcFhqZU5PbFpaeEpxVW81ZEc2UG14TjlWaGNUSCs1dGhKUmxMbnJVSTFoM1VTSk5hYjd2b3kKWmgwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    server: https://kubernetes.docker.internal:6443
  name: docker-desktop
contexts:
- context:
    cluster: arn:aws:eks:::cluster/
    user: arn:aws:eks:::cluster/
  name: arn:aws:eks:::cluster/
- context:
    cluster: arn:aws:eks:us-east-2:312029113425:cluster/prod
    user: arn:aws:eks:us-east-2:312029113425:cluster/prod
  name: arn:aws:eks:us-east-2:312029113425:cluster/prod
- context:
    cluster: docker-desktop
    user: docker-desktop
  name: docker-desktop
current-context: arn:aws:eks:us-east-2:312029113425:cluster/prod
kind: Config
preferences: {}
users:
- name: arn:aws:eks:::cluster/
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1beta1
      args:
      - --region
      - ''
      - eks
      - get-token
      - --cluster-name
      - ''
      command: aws
      env: null
      interactiveMode: IfAvailable
      provideClusterInfo: false
- name: arn:aws:eks:us-east-2:312029113425:cluster/prod
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1beta1
      args:
      - --region
      - us-east-2
      - eks
      - get-token
      - --cluster-name
      - prod
      - --output
      - json
      command: aws
- name: docker-desktop
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJekNDQWd1Z0F3SUJBZ0lJUkVYL0RFaUhDQUl3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TXpFeE1EY3hNalUxTURKYUZ3MHlOREV4TWpFeU1qRTVNakZhTURZeApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1Sc3dHUVlEVlFRREV4SmtiMk5yWlhJdFptOXlMV1JsCmMydDBiM0F3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRFVnUlFDamtPNlo5Z2cKWlJRWTNaSzBIejhFanZuZ3hYSUcvQ3Z1ZmpyOFBPVTEraGRPdGkrbFJoQUF0dHA2dkkzMVBrVStzWGw4M3hLNwowYStUUVhtZVVNMnBOc3Jab3QxMjBUaUxaQzNYaE9qdEpMTkIrNUJVV0t0UWpTVGowMkVwNVFYeUVGQTl6ZnFuCjVqZXZoYW1hQjF0TnRLcGx4RnZaanJCT0JlREErTTg2UXZIOXBENU9OV2hWelkvYVJXY1NPVEdLMTcyZXZQdCsKWTdtL0pEdkhFSGo3SFdadVkxM1pMaGtjRXRaWldpU0tnSnh1VEVocVZBZUkxU1ZPcXRWeFFRaUkwTndMeXM4RwoxUjNIL200d0xrL3UvWFZidEI1ZVFNbkxNMElqRjlZYkwvS0hybnA5MTh3RTVHc1h6NVBlUDlLaDdiWXExL2lDCi9WZm4rcUMxQWdNQkFBR2pWakJVTUE0R0ExVWREd0VCL3dRRUF3SUZvREFUQmdOVkhTVUVEREFLQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZQYUU3UU1WUC9UN1k0VTBrSUdMMVdtNApDaCtrTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBckRSRXRWcXNWQUt4a0RVa3RUbU4wSzVVZ0xpTDZDZmRsClZVd2Z4di9YeUtxRmNsMzA2bFNhN2tRelQ5bVRxaHY2NmVlaGFHS1BIMmZzK3RDSDRUOEdMSGtBRU9KVVo1V1AKbExPQkxWb0NlalI0ak5KRVlzcDI5eEd4VnBQYUMrampQT0pYemlaS0lDcVNyb1Fvay9WeTBWeXZOSE5iSG83OAphWGZ0N0dwYTlwbmtyQVRpYkErakJlSlJycDV5NDZaRit5UndNUXBDT3QrL09qRjhrT3JhdU9xU0R1VHJwd1NVCjFheGk0amZ4RFNiSUpUaHRpZGU4dnV0UnE2QUVqalVPc05HaitDbmRqMU5PbUlhVHR1cE54emF2S1hweEZKNzcKUDlWOGRvV3RmbXhKQW9lKzJIWVliK0dPTTQ1S0VNazNOYW1ZdTJLTFkrN1lveDNaM3JmUwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBMUlFVUFvNUR1bWZZSUdVVUdOMlN0QjgvQkk3NTRNVnlCdndyN240Ni9EemxOZm9YClRyWXZwVVlRQUxiYWVyeU45VDVGUHJGNWZOOFN1OUd2azBGNW5sRE5xVGJLMmFMZGR0RTRpMlF0MTRUbzdTU3oKUWZ1UVZGaXJVSTBrNDlOaEtlVUY4aEJRUGMzNnArWTNyNFdwbWdkYlRiU3FaY1JiMlk2d1RnWGd3UGpQT2tMeAovYVErVGpWb1ZjMlAya1ZuRWpreGl0ZTlucno3Zm1PNXZ5UTd4eEI0K3gxbWJtTmQyUzRaSEJMV1dWb2tpb0NjCmJreElhbFFIaU5VbFRxclZjVUVJaU5EY0M4clBCdFVkeC81dU1DNVA3djExVzdRZVhrREp5ek5DSXhmV0d5L3kKaDY1NmZkZk1CT1JyRjgrVDNqL1NvZTIyS3RmNGd2MVg1L3FndFFJREFRQUJBb0gvVDdBWDBOMklpRjVvcmIwNQp6QmxLNmtETllPZzh6QTArdFYvYkdaUThpbHBMbWZJdXkxV0dpSE85akljRlp3Rk9PcWtmVG1NL0s1UjdjZk12CjVBaXBrclM2YXJvaFYzdTdrTkxrWVdFdno2SUh0dVlNVXJJRGJaM1NvR0pOY3lIUlRlU1VWakhINVdWWW1aMjcKUkJiYmd1Yy9WZVJxQWIrZ3NmVFFLSElMMWxESWRzOEg4OEsxUkJqK24xMy80WksxKzYxNHJicnV2eExYaEtKMwpmVnc1TG5oVXB2TEhwSEs0eWxSVW9KL0lzV1Y2VWZlTXpuaUwyN1hVVURlQy9oVXdXbWZBSWkreUYwcVBlMk9CCm9YWXV5amtNSDQyTnZiVEZZQVZMOGZObm1WYzBhTDB3YmM0UEVHQjY3dzVsbXNYTERyZ3NFanU3b3FHVnBFSDgKcVlpQkFvR0JBT2krUVUyR2UzL3NzN0NPQ28xbVozaVNMWWJ6OTljL3h5c0cxU0x2a3VIWEx1MDByVHNtL3luSwpVZ3BxZmdYSmRHUXRSdGpQNXpSUm81MFZNK3NVVjJrWkxwbStRbFU2dlQ4WTl5YUY1b0ZRdFFjVzN6WjE3cjMwCmNhUnJhTFhIRkEwMVI1TkpUVmJCekJyRWhEWVNLZHdxbnY1bHlLcGtmZXZ3czhhRDNyTkxBb0dCQU9tOUdGSnYKdHZ1a3NRWGNJVm5LVndVRVY4bWpxNXB1OFpRNDgvWjZzaDNUWFlOekJ3UmV5SkRCWTd3a1htSmlGVXZKWDNHTwpWczNpcStwamdiR3JhRVhaSjMxYXVhWVR3U2lJcTFTS0xjR0pEdzFCTHh0eWFWZ3lYVnJNZHZMa3NhUTdaQndoCkQ5YkFONU1XOGYzdE1mMTg3WXpMRUR3Z0RDRXRYK1JGWTN2L0FvR0JBS2N2aTY5SnpFc2ZXQkNhYUFBY3NIVU8KNUQ5TjN4bXpDYm5ocFpiNzYxSHBoaDhFdU8rRjJzTkZQMXVXRmNMSWJLQk5XZGdDdUQxLzYzeTZMMXBOZVdEWQpvdjN6aXFpNGtoclNMeTl2L2gya1FQVy91MFhldjBtYVgwdlJrQjBMelY2VGlEL0g1eE5NRVBhbGRhZDFzclloCnM2WmdyUjJoSkVjbzE2cmhMVWN6QW9HQkFJdndkNUJiYkIxTEkrVVRQekJuOFNPQ3p5QmRDaytDbnNZVU54UFoKcjZ3bHNMWVRkeDhKdEdEZU45MGJsUnFvQ0lJQVJWRlNXK3dXQ3NGZzQvUkFZRVI1VjZnNFdpL3hZZExueUZQcwpDcXIxYVBxUmpTZU1uejk3bitMTnlXVnd3RjVJWkk1bXlQblV5VEVhS3JYUmZmMTYveW90SlVJcUdiai9Wb3J2CmREbDNBb0dBVEJTYkExcHFrTUZWeEs0eGg2KytmeDBHQ3dLazhWOVZNMUVZdy9JV2Zscy9IZmlIRmlBU1AzTzgKWE9EbTR6SFNZZW5SUUF4azB3ZXBLN2t0MTVxM1p5L0ZmS2dtTFd0eTZBU3EvWjdMdUV1Z1hoR3lIMjNtSStTMwp3Nmo2bTljSEFRMStYeGE1UHdsNVY4NDc0b1c0bDN5YmozRDM3czFWRVpVa1pmN001YXc9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==>
      context: <context name> # current-context from kubeconfig is used as default
      
    - name: Set imagePullSecret
      uses: azure/k8s-create-secret@v4
      with:
        secret-name: 'regcred'
        container-registry-url: 'https://index.docker.io/v1/'
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
      id: create-secret
        # aws eks update-kubeconfig --region us-east-2 --name prod

    - name: Deploy to EKS
      run: | 
        kubectl apply -f knote.yml
        kubectl apply -f minio.yml
        kubectl apply -f mongo.yml





